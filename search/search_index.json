{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PySoundSphere","text":"<p>PySoundSphere is a high level audio playback library written in python.</p>"},{"location":"#installation","title":"Installation","text":"<p>The installation process is straight forward. Most people will want to install the <code>sounddevice</code> backend. You can always install any backend later as well.</p> SounddevicePygameffplay Install with the sounddevice backend<pre><code>pip install PySoundSphere[sounddevice-backend]\n</code></pre> Install with the pygame backend<pre><code>pip install PySoundSphere[pygame-backend]\n</code></pre> Install with the ffplay backend<pre><code>pip install PySoundSphere\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#getting-started","title":"Getting started.","text":"<p>The following code is an example to get some audio playback started.</p> Getting it working<pre><code>import PySoundSphere\nimport time\n\nplayer = PySoundSphere.AudioPlayer(\"sounddevice\")\nplayer.load(\"path/to/your/audio_file\")\nplayer.volume = 0.025\nplayer.play()\n\ntime.sleep(10)\n</code></pre>"},{"location":"usage/#choosing-a-backend","title":"Choosing a backend","text":"<p>Make sure to have the backend you choose installed. Further instructions can be found here and here.</p> SounddevicePygameffplay Choose the sounddevice backend<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"sounddevice\")\n</code></pre> Choose the pygame backend<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"pygame\")\n</code></pre> Choose the ffplay backend<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"ffplay\")\n</code></pre>"},{"location":"usage/#load-audio","title":"Load Audio","text":"Load audio<pre><code>import PySoundSphere\n...  # A backend needs to be chosen somewhere here\nplayer.load(\"path/to/your/audio_file\")\n</code></pre>"},{"location":"usage/#play-audio","title":"Play Audio","text":"Play audio<pre><code>import PySoundSphere\n...  # The audio must have been loaded somewhere here\nplayer.play()\n...\n# PySoundSphere will not play audio if your script ends immediately. \n# In the case it does, uncomment the following:\n# import time\n# time.sleep(60)\n</code></pre>"},{"location":"usage/#pause-audio","title":"Pause Audio","text":"Pause audio playback<pre><code>import PySoundSphere\n...\nplayer.pause()\n</code></pre>"},{"location":"usage/#resume-unpause-audio","title":"Resume / Unpause Audio","text":"Resume audio playback<pre><code>import PySoundSphere\n...\nplayer.play()\n</code></pre>"},{"location":"usage/#stop-audio","title":"Stop Audio","text":"Stop audio playback<pre><code>import PySoundSphere\n...\nplayer.stop()\n</code></pre>"},{"location":"usage/#position","title":"Position","text":"GetSet Get current position in audio<pre><code>import PySoundSphere\n...\ncurrent_position = player.position\nprint(current_position)\n</code></pre> Set current position in audio<pre><code>import PySoundSphere\n...\nnew_position = 60\nplayer.position = new_position\n</code></pre>"},{"location":"usage/#volume","title":"Volume","text":"GetSet Get current volume<pre><code>import PySoundSphere\n...\ncurrent_volume = player.volume\nprint(current_volume)\n</code></pre> Set current volume<pre><code>import PySoundSphere\n...\nnew_volume = 0.25\nplayer.volume = new_volume\n</code></pre>"},{"location":"usage/#callback-function","title":"Callback function","text":"<p>A callback function is a function that gets executed once the current audio file finished playing. Set a callback function<pre><code>import PySoundSphere\n...\ndef on_audio_finished():\n    # Your logic goes here\n    print(\"Done!\")\n\nplayer.set_callback_function(on_audio_finished)\n</code></pre></p>"},{"location":"backends/ffplay/","title":"Ffplay","text":""},{"location":"backends/ffplay/#this-backend-should-only-be-used-as-a-fallback","title":"This backend should only be used as a fallback.","text":""},{"location":"backends/ffplay/#due-to-limitations-in-ffplay-volume-can-not-be-changed-seamlessly-resulting-in-stutters","title":"Due to limitations in ffplay volume can not be changed seamlessly, resulting in stutters.","text":""},{"location":"backends/ffplay/#installation","title":"Installation","text":"<p>On most systems no further installation is required. The ffplay backend only needs <code>ffplay</code>, which is part of ffmpeg. So make sure you have ffmpeg installed.</p>"},{"location":"backends/ffplay/#usage","title":"Usage","text":"<p>The backend can be used like in the following.</p> <p>Setup ffplay backend<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"ffplay\")\n</code></pre> View the general usage section for more information.</p>"},{"location":"backends/ffplay/#backend-specific-options","title":"Backend specific options","text":"<p>The ffplay backend does not have any backend specific options.</p>"},{"location":"backends/general/","title":"Playback Backends","text":""},{"location":"backends/general/#what-are-playback-backends","title":"What are playback backends?","text":"<p>Playback backends determine which libraries will be used to actually play the sounds. PySoundSphere currently supports <code>sounddevice</code>, <code>pygame</code> and <code>ffplay</code>, with plans to later add support for <code>PyAudio</code> as well. Each backend has different requirements and different advantages/disadvantages. The vast majority of features is shared between all backends. Some more specific options are only available in certain backends though. More information about that can be found on their own pages.</p>"},{"location":"backends/general/#which-one-should-i-use","title":"Which one should I use?","text":"<p>Generally it is recommended to use <code>sounddevice</code>. If you encounter problems with it, or you already use <code>pygame</code> somewhere in your project, it might be better to use that instead. <code>ffplay</code> is only meant as a fallback when nothing else works and thus should be avoided. There is more information on their dedicated pages. Links to the pages are listed below, or can be found on the left-hand side.</p>"},{"location":"backends/general/#how-can-i-install-them","title":"How can I install them?","text":"<p>For each backend there is a dedicated page. Installation instructions can be found on there. Alternatively you will most likely have installed one backend during the installation PySoundSphere itself. Here are the links for all the dedicated pages:</p> <ul> <li>sounddevice backend</li> <li>sounddevice pygame</li> <li>sounddevice ffplay</li> </ul>"},{"location":"backends/pygame/","title":"Pygame","text":""},{"location":"backends/pygame/#installation","title":"Installation","text":"<p>The pygame backend is part of the optional dependency group <code>pygame-backend</code>. Either install it or install the required libraries manually.</p> AutomaticManual Install with the group<pre><code>pip install PySoundSphere[pygame-backend]\n</code></pre> Install the libraries manually<pre><code>pip install PySoundSphere pygame\n</code></pre>"},{"location":"backends/pygame/#usage","title":"Usage","text":"<p>After that you can use the backend like in the following.</p> <p>Setup pygame backend<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"pygame\")\n</code></pre> View the general usage section for more information.</p>"},{"location":"backends/pygame/#backend-specific-options","title":"Backend specific options","text":"<p>The pygame backend does not have any backend specific options.</p>"},{"location":"backends/sounddevice/","title":"Sounddevice","text":""},{"location":"backends/sounddevice/#installation","title":"Installation","text":"<p>The sounddevice backend is part of the optional dependency group <code>sounddevice-backend</code>. Either install it or install the required libraries manually.</p> AutomaticManual Install with the group<pre><code>pip install PySoundSphere[sounddevice-backend]\n</code></pre> Install the libraries manually<pre><code>pip install PySoundSphere sounddevice soundfile numpy\n</code></pre>"},{"location":"backends/sounddevice/#usage","title":"Usage","text":"<p>After that you can use the backend like in the following.</p> <p>Setup sounddevice backend<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"sounddevice\")\n</code></pre> View the general usage section for more information.</p>"},{"location":"backends/sounddevice/#backend-specific-options","title":"Backend specific options","text":"<p>The following sections will cover all backend specific options available in the sounddevice backend.</p>"},{"location":"backends/sounddevice/#blocksize","title":"blocksize","text":"<p>The <code>sounddevice_blocksize</code> parameter is the size of the buffer the audio stream uses.</p> <p>The default value <code>sounddevice_blocksize=0</code> is special, as it will use a (possibly varying) buffer size based on requirements of the host system.</p> <p>On some systems and configurations the default value may cause issues. For example, there have been issues with stuttering audio when the playback was started while other applications were already using the audio device. This can often be fixed by increasing the blocksize.</p> <p>Additional information:</p> Setup sounddevice backend with blocksize of 1024<pre><code>import PySoundSphere\nplayer = PySoundSphere.AudioPlayer(\"sounddevice\", sounddevice_blocksize=1024)\n</code></pre> Small Blocksize Larger Blocksize Lower Latency Higher Latency Higher CPU Usage Lower CPU Usage"}]}